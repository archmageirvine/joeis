package irvine.factor.factor;

import java.util.HashMap;

import irvine.factor.util.FactorSequence;
import irvine.math.z.Z;
import irvine.util.string.StringUtils;

/**
 * Provide a convenience method for find the least prime factor.
 * Partially backed by <code>factordb.com</code>
 * @author Sean A. Irvine
 */
public final class LeastPrimeFactorizer {

  private final boolean mVerbose = "true".equals(System.getProperty("oeis.verbose"));
  private final PrimeDivision mPrimeDivision = new PrimeDivision(10000000);

  private LeastPrimeFactorizer() { }

  // OEIS relevant hard cases, but where the lpf is confidently known
  // If this list gets too long, it could be moved to a config file
  private final HashMap<Z, Z> mHardCases = new HashMap<>();
  {
    mHardCases.put(new Z("18718518318117917717517317116916716516316115915715515315114914714514314113913713513313112912712512312111911711511311110910710510310199979593918987858381797775737169676563615957555351494745434139373533312927252321191715131197531"), Z.valueOf(130127521));
    mHardCases.put(new Z("1658151461612523934210160786231756703739801964685320323733936052636851061474243883100399686061583204219852341749971939932416275560056149605385015871113416466747381335194676015641415828470961339307286193009169155965829268282261446065385232041870905269704417986426614690675720116641"), Z.valueOf(121229832887L));
    mHardCases.put(new Z("201017424592621072090585574452276395646818160109275658388329807511909889880431149802943417384152995038218692598164711414946027160264549348997496469348922208887419031710513504988315839001611299896460009519984004436452321276232044652949615355713727632673674256380095533239756746848651347939681"), Z.valueOf(104661860755129L));
    mHardCases.put(new Z("160516503488884764616113429287091789592143480510890143941310542569330341031249966082450270790606162791823047836167654444098692539876258381680441545819337732414848738689948571507427105818158098007019192804931653096394336054651832733836408717229930766490666898191884987670922241760753648025983579625692313926154498318351575537748611681"), Z.valueOf(219069757));
    mHardCases.put(new Z("64264677876042248626448192396771053310811385666593669490620778464651603859097602730164010508470497395575523214025589399308771766055719008587472176389282468509611181709578379853086972291641715509475457380029558107080478803086615266539757670828883786618548367150736010962004026309792545054256111668200630139863777200819810575587007179700062100860154721"), Z.valueOf(1500716683));
    mHardCases.put(new Z("4905191197710026567268586801022692924356001200274081591738338410402538551907329002295434949281119791629836236668590926180519108813917994314418533628564565675979618363153693198383286346306143120628883293710329322890158836214502352845428686852201317340358365473937706976031308896536024083019674404810171987514677022488751400381777991490676052639545340817006019827361"), Z.valueOf(15725736207497L));
    mHardCases.put(new Z("6034631619301404255167594416050906887112294642791819675147977160616907354822712763825319633173783064178938669264912118495754000511286240982973005832373693459522030597794456625702930403418354042819387389318333044110889608944798758607872795129879393233072141193557230632820592012321"), Z.valueOf(2798846359711L));
    mHardCases.put(new Z("21887385061277337443870630166904026815828107436365886252294957448842327879000648968182615907650641862966629967108175543408352766451247611704902266391069632529038310549491319559792227448330630335131682320572656523711672197893356109612386222608831823108331"), Z.valueOf(348005418751L));
    mHardCases.put(new Z("7616928603614201612100530609503688873270393683228327330881140701750100973705262503573147324380555566135632820842745986499440782279995729337753162254953140995067668430097307573445051095711337225677284572697990755654772444014321932966422723695329622271749140086295831"), Z.valueOf(13749980077272689L));
    mHardCases.put(new Z("6714883156168090370946937399114215802383668332309458426041578695364753103862310275699363661847845255923643303535760422063014712180341513083891676070116035260441971313142474693548858296745001916943398574411974050303844806127674147252276681757549708020422084253628553512202493456039813221031947744004871"), Z.valueOf(57076499));
    mHardCases.put(new Z("3519310584173126134819810658996518961509880786759144896440013120177597095975899955770391465720935471405888806264651774513110470160813986448394695035865757298091192731918405581260092973132412616007868652343749999999"), Z.valueOf(175784429));
    mHardCases.put(new Z("629956594566989578132746107960376894110268660829886936462762348511789880179686092082900072364047449381654096321372667637846774158785703574262650411419970556358323499013394599045556642190701858265408488769531249999999"), Z.valueOf(153745667));
    mHardCases.put(new Z("1070099058009593913217322025098996859145223421040681857749126110710252705105318623320002913779986059500294293845802139078949366966993008263375475961026860406621869336164403005549480633481405031120909555585730421498094155007224496954302579399592791166456534668215077139315284128837586355304183454839050521838746589916757499107695770633340631060225684408976423266536901194801484311846133036641757753831124926849635911"), Z.valueOf(43135118959L));
    mHardCases.put(new Z("2357111317192329313741434753596167717379838997101103107109113127131137139149151157163167173179181191193197199211223227229233239241251257263269271277281283293307311313317331337347349353359367373379383389397401409419421431433439443449457461463467479487"), Z.valueOf(80521799));
    mHardCases.put(new Z("12233344445555566666677777778888888899999999910101010101010101010111111111111111111111112121212121212121212121213131313131313131313131313141414141414141414141414141415151515151515151515151515151516161616161616161616161616161616171717171717171717171717171717171718181818181818181818181818181818181819191919191919191919191919191919191919202020202020202020202020202020202020202021212121212121212121212121212121212121212122222222222222222222222222222222222222222222232323232323232323232323232323232323232323232324242424242424242424242424242424242424242424242425252525252525252525252525252525252525252525252525262626262626262626262626262626262626262626262626262627272727272727272727272727272727272727272727272727272728282828282828282828282828282828282828282828282828282828292929292929292929292929292929292929292929292929292929292930303030303030303030303030303030303030303030303030303030303031313131313131313131313131313131313131313131313131313131313131323232323232323232323232323232323232323232323232323232323232323233333333333333333333333333333333333333333333333333333333333333333334343434343434343434343434343434343434343434343434343434343434343434353535353535353535353535353535353535353535353535353535353535353535353536363636363636363636363636363636363636363636363636363636363636363636363637373737373737373737373737373737373737373737373737373737373737373737373737"), Z.valueOf(264439098646852541L));

    // A005265
    mHardCases.put(new Z("10690707974299116556906186803706241741792332576024523381930319453198426731417132469874803480468573510759614433080135345270919880172961853717517018617237605937772858227976740169589512579448095044366204470330364362851369"), Z.valueOf(184274081));
    mHardCases.put(new Z("52684255214978956991248444618064872616811093519697231959367250871231627520278124105838719127031921899956056071071268652239152308040091814003044885876545768903871817375367110184405461465526259979747569223211278350253428357396560709"), Z.valueOf(63843643));
    mHardCases.put(new Z("3363554781666004782661619822501005078188163253111163545302033270514350997713611816122861399523497671384676159489456703390647590577137651460432798606877930143059293626274134776554846449055315349272191039604488168567208839575702431397066529"), Z.valueOf(111973205287L));
    mHardCases.put(new Z("376628010061558017398093374640853543383792689954086057089535295817807428346559523520954055902692728738222809152527688560859251615565761055836097116275870082058423563428004350273481696054833812822577153317915300985538736050411178328048764773286744109"), Z.valueOf(5848922101627729L));

    // A065315
    mHardCases.put(new Z("256201040651931599305382461251925781858847170265198996852091190629324168449027728035542876334984578188245059186229973899465052910204193443350680384306794366967"), Z.valueOf(49960213));

    // A342836
    mHardCases.put(new Z("797997997399991999983999999199999989999999937999999996799999999977999999999989999999999997199999999999973999999999999989999999999999993799999999999999997999999999999999989999999999999999996199999999999999999989999999999999999999899999999999999999999997399999999999999999999977999999999999999999999743"), Z.valueOf(996370591L));
  }

  private Z findLpf(final Z u) {
    try {
      final Z lpf = Jaguar.factor(u).leastPrimeFactor();
      if (mVerbose) {
        StringUtils.message("jaguar " + lpf + " is lpf of " + u);
      }
      return lpf;
    } catch (final UnsupportedOperationException e) {
      // We only require lpf, sometimes we can get it this way even if the entire factorization is unknown
      final FactorSequence fs = new FactorSequence(u);
      mPrimeDivision.factor(fs);
      final Z[] p = fs.toZArray();
      if (p.length > 0 && p[0].isProbablePrime()) {
        if (mVerbose) {
          StringUtils.message("trial " + p[0] + " is lpf of " + u);
        }
        return p[0];
      } else {
        final Z lpf = mHardCases.get(u);
        if (lpf != null) {
          if (mVerbose) {
            StringUtils.message("special " + lpf + " is lpf of " + u);
          }
          return lpf;
        }
        throw e;
      }
    }
  }

  private static final LeastPrimeFactorizer LPF = new LeastPrimeFactorizer();

  /**
   * Find the least prime factor of a given number.
   * @param n number to factor
   * @return least prime factor
   * @throws UnsupportedOperationException if the requested factor cannot be determined.
   */
  public static Z lpf(final Z n) {
    return LPF.findLpf(n);
  }

  /**
   * Find the least prime factor of a given number.
   * @param n number to factor
   * @return least prime factor
   * @throws UnsupportedOperationException if the requested factor cannot be determined.
   */
  public static Z lpf(final long n) {
    return LPF.findLpf(Z.valueOf(n));
  }
}
