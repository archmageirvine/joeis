package irvine.oeis;

import java.util.function.BiFunction;

import irvine.math.z.Z;

/**
 * A sequence generated by a term-by-term operation on two other sequences.
 * @author Sean A. Irvine
 */
public class Combiner extends AbstractSequence {

  /** Addition. */
  public static final BiFunction<Z, Z, Z> ADD = Z::add;
  /** Subtraction. */
  public static final BiFunction<Z, Z, Z> SUBTRACT = Z::subtract;
  /** Multiply. */
  public static final BiFunction<Z, Z, Z> MULTIPLY = Z::multiply;
  /** Divide. */
  public static final BiFunction<Z, Z, Z> DIVIDE = Z::divide;
  /** Power. */
  public static final BiFunction<Z, Z, Z> POW = Z::pow;
  /** Greatest common divisor. */
  public static final BiFunction<Z, Z, Z> GCD = Z::gcd;
  /** Average: <code>(a+b)/2</code>. */
  public static final BiFunction<Z, Z, Z> AVERAGE = (a, b) -> a.add(b).divide2();
  /** Minimum. */
  public static final BiFunction<Z, Z, Z> MIN = Z::min;

  private final Sequence mSeqA;
  private final Sequence mSeqB;
  private final BiFunction<Z, Z, Z> mOp;

  /**
   * Combiner.
   * @param offset offset of combined sequence
   * @param a first sequence
   * @param b second sequence
   * @param op combination operation
   */
  public Combiner(final int offset, final Sequence a, final Sequence b, final BiFunction<Z, Z, Z> op) {
    super(offset);
    mSeqA = a;
    mSeqB = b;
    mOp = op;
  }

  /**
   * Combiner with inferred offset.  If <code>a</code> has an offset, that will be used,
   * otherwise, if <code>b</code> has an offset, that will be used, otherwise the offset
   * will be 0.
   * @param a first sequence
   * @param b second sequence
   * @param op combination operation
   */
  public Combiner(final Sequence a, final Sequence b, final BiFunction<Z, Z, Z> op) {
    this(a instanceof SequenceWithOffset
        ? ((SequenceWithOffset) a).getOffset()
        : b instanceof SequenceWithOffset
        ? ((SequenceWithOffset) b).getOffset()
        : 0,
      a, b, op);
  }

  @Override
  public Z next() {
    return mOp.apply(mSeqA.next(), mSeqB.next());
  }
}
