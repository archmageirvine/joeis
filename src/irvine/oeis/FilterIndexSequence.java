package irvine.oeis;

import java.util.function.Function;

import irvine.math.z.Z;

/**
 * A sequence generated by selecting the terms whose - ascending - positions (indexes) are 
 * given by another sequence or a lambda expression.
 * @author Georg Fischer
 */
public class FilterIndexSequence extends AbstractSequence {

  private final Sequence mSeq;
  private final Sequence mIndexSeq; // this sequence provides the positions in mSeq. It must be ascending
  private final Function<Integer, Z> mLambda; // lambda expression n -> f(n) for the indexes, also ascending
  private int mN; // current index
  private int mIndex; // next index to be selected
  private int mNix; // independant variable for the lambda expression

  /**
   * Filter with a lambda express.
   * @param offset offset of the filtered sequence
   * @param seq sequence to be filtered
   * @param indexStart starting value for the lambda expression
   * @param lambda lambda expression for the desired indexes
   */
  public FilterIndexSequence(final int offset, final Sequence seq, final int indexStart, final Function<Integer, Z> lambda) {
    super(offset);
    mSeq = seq;
    mIndexSeq = null;
    mLambda = lambda;
    mNix = indexStart;
    mIndex = mLambda.apply(mNix).intValueExact();
    mN = seq.getOffset() - 1;
  }

  /**
   * Filter with an index sequence.
   * @param offset offset of the filtered sequence
   * @param seq underlying sequence
   * @param indexSeq sequence giving the desired indexes
   */
  public FilterIndexSequence(final int offset, final Sequence seq, final Sequence indexSeq) {
    super(offset);
    mSeq = seq;
    mIndexSeq = indexSeq;
    mLambda = null;
    mNix = mIndexSeq.getOffset();
    mIndex = mIndexSeq.next().intValueExact();
    mN = seq.getOffset() - 1;
  }

  @Override
  public Z next() {
    while (++mN < mIndex) {
      mSeq.next();
    }
    mIndex = ((mIndexSeq == null) ? mLambda.apply(++mNix) : mIndexSeq.next()).intValueExact();
    return mSeq.next();
  }
}
