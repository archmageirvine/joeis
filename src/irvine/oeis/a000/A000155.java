package irvine.oeis.a000;

import irvine.math.z.Z;
import irvine.oeis.Sequence;

import java.math.BigDecimal;

/**
 * A000155 Nearest integer to modified Bessel function K_n(1).
 * @author Sean A. Irvine
 */
public class A000155 implements Sequence {

  private static final BigDecimal HALF = new BigDecimal("0.5");
  private int mN = 0;
  private BigDecimal mA = null;
  private BigDecimal mB = null;
  private BigDecimal mAE = null;
  private BigDecimal mBE = null;

  protected String k0() {
    // High precision constant BesselK(0,1) computed by Maple
    return "0.4210244382407083333356273792126090361362197482266604722989695514552126781381018390921251395473653045109346096803754468039677056090113526310006471926476152242178399680374353783586434326584945479384182638660927522453629492963794968779793208180119098186775614798155341165361860841957093889527835437786420093940374485437549557950709514706250729711107972907840620929770867015021287409614504776295996511000793688144154348966005838171566228953588819809175336397836495533323896646958201704954358144181204518550895968867737326038033359523964616265996782118507723815457995474499590926280850509130755472351410083597782166753939999189858816231059104689574586729392091732327229808958900573236661808590185288390511184996898147186645847492453620626791322424954088386491808760932685962134510406131002395501649038663495970031562406922337959199124240713194759857361864890555545764338631065662345415183145534624881256757494965152528503963622970147996322287390885240235448766085562795705812696074155679436378936305049757";
  }

  protected String k1() {
    // High precision constant BesselK(1,1) computed by Maple
    return "0.6019072301972345747375400015356173392615868899681064560177679591685535829462378401688637069582582153546440997831400509084692928134932946056557269619962292042170940394145652398988173058724194685217618557437329775465397128141240314774019981917638877074452972303579900048574417337625128356868335502420710970567174680483144908418791645998522937419211654754601893774035843898822222551562700403889009490864923515374102234305816360474140766827138480658088604931709311508122450699586181652478226348007765236976018839531329555467093745751922689310531356016831889280229913422243911791636347576675426893067736633428740721728067466699264141956815449490751800241205907640062809210011733820586327825840927702464633789002450944403719900416628520442377340799180640742778009390292995861272036210424244931029327800115817521741578479895560465002577199227017563839068971027493571349109084494037826734815313481600629408826466214144577350943569992655751384621028971288490946593658528592170638321831777437334695222826176953";
  }

  protected BigDecimal z() {
    return BigDecimal.ONE;
  }

  private Z toZ(final BigDecimal d) {
    final String s = d.add(HALF).toPlainString();
    final int dot = s.indexOf('.');
    if (dot > 500) {
      throw new UnsupportedOperationException();
    }
    return new Z(s.substring(0, dot));
  }

  @Override
  public Z next() {
    if (mA == null) {
      mA = new BigDecimal(k0());
      mAE = new BigDecimal(k0().substring(0, k0().length() - 1));
      return toZ(mA);
    }
    if (mB == null) {
      mB = new BigDecimal(k1());
      mBE = new BigDecimal(k1().substring(0, k1().length() - 1));
      return toZ(mB);
    }
    // Otherwise apply recurrence relation
    // zK_{v+1}(z) = 2vK_v(z) + K_{v-1}(z)
    mN += 2;
    final BigDecimal t = mA.add(mB.multiply(new BigDecimal(mN)).divide(z()));
    final BigDecimal te = mAE.add(mBE.multiply(new BigDecimal(mN)).divide(z()));
    final Z r = toZ(t);
    final Z re = toZ(te);
    if (!r.equals(re)) {
      throw new UnsupportedOperationException();
    }
    mA = mB;
    mB = t;
    mAE = mBE;
    mBE = te;
    return r;
  }

}

