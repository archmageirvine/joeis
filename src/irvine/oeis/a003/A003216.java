package irvine.oeis.a003;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.function.Supplier;

import irvine.math.graph.Graph;
import irvine.math.graph.Graph6;
import irvine.math.nauty.Counter;
import irvine.math.nauty.GenerateGraphs;
import irvine.math.nauty.Multigraph;
import irvine.oeis.ParallelGenerateGraphsSequence;

/**
 * A003216 Number of Hamiltonian graphs with n nodes.
 * @author Sean A. Irvine
 */
public class A003216 extends ParallelGenerateGraphsSequence {

  protected A003216(final Supplier<Counter> counterSupplier) {
    super(0, 0, false, false, false, counterSupplier);
  }

  /** Construct the sequence. */
  public A003216() {
    this(() -> graph -> graph.isHamiltonian() ? 1 : 0);
  }

  @Override
  protected void graphGenInit(final GenerateGraphs gg) {
    gg.setVertices(mN);
    gg.setMinEdges(mN - 1);
    gg.setMaxEdges(Multigraph.NOLIMIT);
    gg.setMinDeg(2);
    gg.setMaxDeg(mN);
    gg.setConnectionLevel(1);
  }

  /**
   * This main is used as part of a parallel computation of Hamiltonian graphs generated by nauty.
   * For example, <code>geng -d2 -c 7 | java irvine.oeis.a003.A003216</code>.
   * @param args ignored
   */
  public static void main(final String[] args) {
    long c = 0;
    long n = 0;
    try (final BufferedReader r = new BufferedReader(new InputStreamReader(System.in))) {
      String line;
      while ((line = r.readLine()) != null) {
        ++n;
        final Graph g = Graph6.toGraph(line);
        if (g.isHamiltonian()) {
          ++c;
        }
      }
    } catch (final IOException e) {
      throw new RuntimeException(e);
    }
    System.out.println(c + " " + n);
  }
}
