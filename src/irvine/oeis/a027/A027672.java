package irvine.oeis.a027;

import irvine.math.group.IntegerField;
import irvine.math.group.PolynomialRingField;
import irvine.math.polynomial.Polynomial;
import irvine.math.z.Z;
import irvine.oeis.Sequence;

/**
 * A027672 Molien series for unitary 16-dimensional full Siegel modular group H_4 of order 48514675507200.
 * @author Sean A. Irvine
 */
public class A027672 implements Sequence {

  // After Ray Chandler

  private static final PolynomialRingField<Z> RING = new PolynomialRingField<>(IntegerField.SINGLETON);
  private static final Polynomial<Z> G = Polynomial.create(
    1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, -1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 12, 0, 0, 0, 13, 0, 0, 0, 34, 0, 0,
    0, 43, 0, 0, 0, 107, 0, 0, 0, 157, 0, 0, 0, 335, 0, 0, 0, 549, 0, 0, 0, 1094, 0, 0, 0, 1861, 0, 0, 0, 3501, 0, 0, 0, 5965, 0, 0, 0,
    10728, 0, 0, 0, 18041, 0, 0, 0, 31051, 0, 0, 0, 51025, 0, 0, 0, 84427, 0, 0, 0, 134865, 0, 0, 0, 215008, 0, 0, 0, 333369, 0, 0, 0,
    513542, 0, 0, 0, 773052, 0, 0, 0, 1153627, 0, 0, 0, 1688292, 0, 0, 0, 2447124, 0, 0, 0, 3487706, 0, 0, 0, 4922301, 0, 0, 0, 6845055,
    0, 0, 0, 9427941, 0, 0, 0, 12816307, 0, 0, 0, 17262549, 0, 0, 0, 22980000, 0, 0, 0, 30324507, 0, 0, 0, 39594318, 0, 0, 0, 51272203, 0
    , 0, 0, 65756890, 0, 0, 0, 83679250, 0, 0, 0, 105549085, 0, 0, 0, 132161437, 0, 0, 0, 164140047, 0, 0, 0, 202451163, 0, 0, 0,
    247823660, 0, 0, 0, 301389903, 0, 0, 0, 363960630, 0, 0, 0, 436814071, 0, 0, 0, 520802553, 0, 0, 0, 617312656, 0, 0, 0, 727180701, 0,
    0, 0, 851846951, 0, 0, 0, 992056493, 0, 0, 0, 1149232929, 0, 0, 0, 1323941514, 0, 0, 0, 1517506330, 0, 0, 0, 1730214602, 0, 0, 0,
    1963201767, 0, 0, 0, 2216376776L, 0, 0, 0, 2490597453L, 0, 0, 0, 2785299743L, 0, 0, 0, 3100983710L, 0, 0, 0, 3436532034L, 0, 0, 0,
    3792023955L, 0, 0, 0, 4165731123L, 0, 0, 0, 4557273329L, 0, 0, 0, 4964284431L, 0, 0, 0, 5385917115L, 0, 0, 0, 5819175192L, 0, 0, 0,
    6262771875L, 0, 0, 0, 6713128315L, 0, 0, 0, 7168581264L, 0, 0, 0, 7625054128L, 0, 0, 0, 8080605429L, 0, 0, 0, 8530781308L, 0, 0, 0,
    8973489231L, 0, 0, 0, 9404047193L, 0, 0, 0, 9820361028L, 0, 0, 0, 10217690359L, 0, 0, 0, 10594101406L, 0, 0, 0, 10944974102L, 0, 0, 0,
    11268698558L, 0, 0, 0, 11560953224L, 0, 0, 0, 11820605627L, 0, 0, 0, 12043796179L, 0, 0, 0, 12230003475L, 0, 0, 0, 12375970644L, 0, 0, 0,
    12481889419L, 0, 0, 0, 12545212616L, 0, 0, 0, 12566910422L, 0, 0, 0, 12545212616L, 0, 0, 0, 12481889419L, 0, 0, 0, 12375970644L, 0, 0, 0,
    12230003475L, 0, 0, 0, 12043796179L, 0, 0, 0, 11820605627L, 0, 0, 0, 11560953224L, 0, 0, 0, 11268698558L, 0, 0, 0, 10944974102L, 0, 0, 0,
    10594101406L, 0, 0, 0, 10217690359L, 0, 0, 0, 9820361028L, 0, 0, 0, 9404047193L, 0, 0, 0, 8973489231L, 0, 0, 0, 8530781308L, 0, 0, 0,
    8080605429L, 0, 0, 0, 7625054128L, 0, 0, 0, 7168581264L, 0, 0, 0, 6713128315L, 0, 0, 0, 6262771875L, 0, 0, 0, 5819175192L, 0, 0, 0,
    5385917115L, 0, 0, 0, 4964284431L, 0, 0, 0, 4557273329L, 0, 0, 0, 4165731123L, 0, 0, 0, 3792023955L, 0, 0, 0, 3436532034L, 0, 0, 0,
    3100983710L, 0, 0, 0, 2785299743L, 0, 0, 0, 2490597453L, 0, 0, 0, 2216376776L, 0, 0, 0, 1963201767, 0, 0, 0, 1730214602, 0, 0, 0,
    1517506330, 0, 0, 0, 1323941514, 0, 0, 0, 1149232929, 0, 0, 0, 992056493, 0, 0, 0, 851846951, 0, 0, 0, 727180701, 0, 0, 0, 617312656,
    0, 0, 0, 520802553, 0, 0, 0, 436814071, 0, 0, 0, 363960630, 0, 0, 0, 301389903, 0, 0, 0, 247823660, 0, 0, 0, 202451163, 0, 0, 0,
    164140047, 0, 0, 0, 132161437, 0, 0, 0, 105549085, 0, 0, 0, 83679250, 0, 0, 0, 65756890, 0, 0, 0, 51272203, 0, 0, 0, 39594318, 0, 0,
    0, 30324507, 0, 0, 0, 22980000, 0, 0, 0, 17262549, 0, 0, 0, 12816307, 0, 0, 0, 9427941, 0, 0, 0, 6845055, 0, 0, 0, 4922301, 0, 0, 0,
    3487706, 0, 0, 0, 2447124, 0, 0, 0, 1688292, 0, 0, 0, 1153627, 0, 0, 0, 773052, 0, 0, 0, 513542, 0, 0, 0, 333369, 0, 0, 0, 215008, 0,
    0, 0, 134865, 0, 0, 0, 84427, 0, 0, 0, 51025, 0, 0, 0, 31051, 0, 0, 0, 18041, 0, 0, 0, 10728, 0, 0, 0, 5965, 0, 0, 0, 3501, 0, 0, 0,
    1861, 0, 0, 0, 1094, 0, 0, 0, 549, 0, 0, 0, 335, 0, 0, 0, 157, 0, 0, 0, 107, 0, 0, 0, 43, 0, 0, 0, 34, 0, 0, 0, 13, 0, 0, 0, 12, 0, 0
    , 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, -1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1);
  private static final Polynomial<Z> NUM = RING.multiply(G, RING.onePlusXToTheN(12));
  private static final int[] D_POWERS = {12, 20, 24, 24, 24, 24, 28, 36, 48, 56, 60, 68, 72, 80, 84, 120};

  private static Polynomial<Z> den() {
    Polynomial<Z> den = RING.one();
    for (final int d : D_POWERS) {
      den = RING.multiply(den, RING.oneMinusXToTheN(d));
    }
    return den;
  }

  private static final Polynomial<Z> DEN = den();

  private int mN = -4;

  @Override
  public Z next() {
    mN += 4;
    return RING.coeff(NUM, DEN, mN);
  }
}
