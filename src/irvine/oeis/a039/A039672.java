package irvine.oeis.a039;

import irvine.math.z.Z;
import irvine.oeis.Sequence1;
import irvine.util.array.DynamicLongArray;

/**
 * A039672 Fibonacci-lucky numbers: generated by a sieve process with Fibonacci rule.
 * @author Sean A. Irvine
 */
public class A039672 extends Sequence1 {

  private final DynamicLongArray mSievers = new DynamicLongArray();   // Values we are sieving by
  private final DynamicLongArray mCountDown = new DynamicLongArray(); // Countdown to next elimation by corresponding mSievers value
  private long mPrev = 0;
  private long mN = 0;
  private long mCount = 0;

  private boolean sieve() {
    // Find out if n would be eliminated by the sieve
    for (int k = 0; k < mSievers.length(); ++k) {
      final long c = mCountDown.get(k) - 1;
      if (c == 0) {
        mCountDown.set(k, mSievers.get(k));
        return true;
      }
      mCountDown.set(k, c);
    }
    return false;
  }


  @Override
  public Z next() {
    while (true) {
      ++mN;
      if (!sieve()) {
        ++mCount; // We have found a new term
        if (mPrev != 0) {
          final long s = mPrev + mN;
          final int m = mSievers.length();
          mSievers.set(m, s);
          mCountDown.set(m, s - (mCount % s));
        }
        mPrev = mN;
        return Z.valueOf(mN);
      }
    }
  }
}
