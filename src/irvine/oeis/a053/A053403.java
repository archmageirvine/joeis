package irvine.oeis.a053;

import java.util.TreeSet;

import irvine.math.z.Z;
import irvine.oeis.Sequence1;
import irvine.util.Pair;

/**
 * A053403 Consider the set P of pairs (a,b) generated by the rules: (1,1) is in P; if (a,b) is in P then (b,a+b) is in P; if (a,b) and (a',b') are in P then (aa', bb') is in P. Sequence gives numbers not appearing in P.
 * @author Sean A. Irvine
 */
public class A053403 extends Sequence1 {

  private static final class State extends Pair<Long, Long> implements Comparable<State> {

    private State(final Long left, final Long right) {
      super(left, right);
    }

    @Override
    public int compareTo(final State o) {
      final int c = right().compareTo(o.right());
      if (c != 0) {
        return c;
      }
      return left().compareTo(o.left());
    }
  }

  private final TreeSet<State> mSeen = new TreeSet<>();
  private final TreeSet<State> mToExpand = new TreeSet<>();
  {
    mToExpand.add(new State(1L, 1L));
  }

  private long mN = 1;

  @Override
  public Z next() {
    while (true) {
      while (mToExpand.first().right() < mN) {
        final State s = mToExpand.pollFirst();
        //System.out.println("Expanding: " + s.left() + "," + s.right());
        final State d = new State(s.right(), s.left() + s.right());
        if (mSeen.add(d)) {
          mToExpand.add(d);
        }
        final TreeSet<State> newStates = new TreeSet<>();
        for (final State t : mSeen) {
          if (t.right() > s.right()) {
            break;
          }
          final State u = new State(s.left() * t.left(), s.right() * t.right());
          if (!mSeen.contains(u) && newStates.add(u)) {
            mToExpand.add(u);
          }
        }
        mSeen.addAll(newStates);
      }
      if (mToExpand.first().right() == mN) {
        ++mN;
      } else {
        return Z.valueOf(mN++);
      }
    }
  }
}
