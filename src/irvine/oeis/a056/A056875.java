package irvine.oeis.a056;

import irvine.math.z.Z;
import irvine.oeis.Sequence;
import irvine.util.array.DynamicLongArray;

/**
 * A056875 Generated by sieving the natural numbers: keep the smallest remaining number k and take out its k-th successor l as well as the l-th successor m of l, the m-th successor of m and so on. Then start again from the next remaining number.
 * @author Sean A. Irvine
 */
public class A056875 implements Sequence {

  private final DynamicLongArray mDownCounters = new DynamicLongArray();
  private long mN = 0;

  private boolean isEliminated(final long n) {
    for (int k = 0; k < mDownCounters.length(); ++k) {
      final long c = mDownCounters.get(k) - 1;
      if (c == 0) {
        mDownCounters.set(k, n);
        return true;
      }
      mDownCounters.set(k, c);
    }
    return false;
  }

  @Override
  public Z next() {
    do {
      ++mN;
    } while (isEliminated(mN));
    mDownCounters.set(mDownCounters.length(), mN);
    return Z.valueOf(mN);
  }
}

