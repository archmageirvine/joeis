package irvine.oeis.a065;
// Generated by gen_seq4.pl deriv at 2021-10-29 23:39

import irvine.math.z.Z;
import irvine.oeis.DirectSequence;
import irvine.oeis.Sequence;
import irvine.oeis.Sequence1;
import irvine.oeis.a048.A048724;

/**
 * A065621 Reversing binary representation of n. Converting sum of powers of 2 in binary representation of a(n) to alternating sum gives n.
 * in binary representation of a(n) to alternating sum gives n.
 * @author Georg Fischer
 */
public class A065621 extends Sequence1 implements DirectSequence {

  private final Sequence mA048724 = new A048724();
  protected long mN;

  /** Construct the sequence. */
  public A065621() {
    mN = 0;
  }

  @Override
  public Z next() {
    ++mN;
    return mA048724.next().subtract(Z.NEG_ONE.pow(mN));
  }


  @Override
  public Z a(final Z n) {
    // MMA: Table[BitXor[n - 1, 2 n - 1],{n, 1, 60}]
    return n.subtract(1).xor(n.multiply2().subtract(1));
  }

  @Override
  public Z a(final int n) {
    return Z.valueOf((n - 1) ^ (2 * n - 1));
  }

}
