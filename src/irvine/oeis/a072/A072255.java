package irvine.oeis.a072;
// Generated by gen_seq4.pl 2024-04-24/lambdan at 2024-04-24 18:19

import irvine.math.function.Functions;
import irvine.math.z.Integers;
import irvine.math.z.Z;
import irvine.oeis.LambdaSequence;

/**
 * A072255 Number of ways to partition {1,2,...,n} into arithmetic progressions, where in each partition all the progressions have the same common difference and have lengths &gt;= 2.
 * @author Georg Fischer
 */
public class A072255 extends LambdaSequence {

  /** Construct the sequence. */
  public A072255() {
    super(0, n -> n <= 1 ? Z.ONE.subtract(n) : Integers.SINGLETON.sum(1, n / 2, d -> Functions.FIBONACCI.z(n / d).pow(n % d).multiply(Functions.FIBONACCI.z(n / d - 1).pow(d - n % d))));
  }
}
