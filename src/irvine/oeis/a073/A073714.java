package irvine.oeis.a073;

import java.util.ArrayList;
import java.util.List;

import irvine.math.group.PolynomialRing;
import irvine.math.polynomial.Polynomial;
import irvine.math.z.Integers;
import irvine.math.z.Z;
import irvine.oeis.Sequence0;

/**
 * A073714 Table, read by antidiagonals, generated by successive convolutions of the first row such that the first row equals the same table in this flattened form.
 * @author Sean A. Irvine
 */
public class A073714 extends Sequence0 {

  private static final PolynomialRing<Z> RING = new PolynomialRing<>(Integers.SINGLETON);
  private final List<Polynomial<Z>> mRows = new ArrayList<>();
  private int mM = 0;
  private int mN = -1;

  private Z t(final int n, final int k) {
    if (n >= mRows.size()) {
      if (n == 0) {
        mRows.add(Polynomial.create(1, 1));
      } else {
        mRows.add(RING.multiply(mRows.get(n - 1), mRows.get(0)));
      }
    }
    final Z res = mRows.get(n).coeff(k);
    if (!res.isZero()) {
      return res;
    }
    // Exhausted current terms, regenerate row 0 from known values
    final Polynomial<Z> c = RING.empty();
    for (int j = 0; j < mRows.size(); ++j) {
      for (int i = 0; i <= j; ++i) {
        final Z coeff = mRows.get(i).coeff(j - i);
        if (coeff.isZero()) {
          break;
        }
        c.add(coeff);
      }
    }
    mRows.set(0, c);
    // Update remaining rows
    for (int j = 1; j < mRows.size(); ++j) {
      mRows.set(j, RING.multiply(mRows.get(j - 1), c, c.degree()));
    }
    return mRows.get(n).coeff(k);
  }

  @Override
  public Z next() {
    if (++mM > mN) {
      ++mN;
      mM = 0;
    }
    return t(mN - mM, mM);
  }
}
