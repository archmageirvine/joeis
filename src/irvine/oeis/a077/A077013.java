package irvine.oeis.a077;

import java.util.Arrays;
import java.util.HashSet;

import irvine.math.cc.CC;
import irvine.math.cc.ComputableComplexField;
import irvine.math.cr.CR;
import irvine.math.function.Functions;
import irvine.math.z.Z;
import irvine.oeis.Sequence1;

/**
 * A077013 Number of different argument values of vector sums generated by n vectors chosen from 2n (equally spaced) points around the unit circle. Arguments are considered different only up to rotation and reflection.
 * @author Sean A. Irvine
 */
public class A077013 extends Sequence1 {

  // todo deal with symmetry -- perhaps can be done with limits on selected set entry
  // second element needs to be <= n?
  // perhaps also needs .abs()
  // todo message sent to Wouter for clarification

  private int mN = 0;

  @Override
  public Z next() {
    if (++mN == 1) {
      return Z.ONE;
    }
    final CR theta = CR.PI.divide(mN);
    // Precompute the 2n points
    final CC[] angles = new CC[2 * mN];
    for (int k = 0; k < angles.length; ++k) {
      angles[k] = ComputableComplexField.SINGLETON.cis(theta.multiply(k));
    }
    System.out.println("Angles: " + Arrays.toString(angles));
    final HashSet<String> res = new HashSet<>();
    final long lim = 1L << (2 * mN - 1);
    for (long set = (1L << (mN - 1)) - 1; set < lim; set = Functions.SWIZZLE.l(set)) {
      //System.out.println(mN + " set=" + Long.toBinaryString(set));
      CC sum = CC.ONE; // WLOG assume cis(0) is always in the number
      for (int k = 0; k < 2 * mN - 1; ++k) {
        if ((set & (1L << k)) != 0) {
          sum = ComputableComplexField.SINGLETON.add(sum, angles[k + 1]);
        }
      }
      //System.out.println("sum=" + sum);
      CR canon = ComputableComplexField.SINGLETON.arg(sum).frac();
      canon = canon.min(CR.ONE.subtract(canon));
      for (int k = 0; k < 2 * mN; ++k) {
        final CR a = ComputableComplexField.SINGLETON.arg(ComputableComplexField.SINGLETON.multiply(sum, angles[k]));
        if (a.compareTo(canon, -32) < 0) {
          canon = a;
        }
      }
      //System.out.println("arg=" + arg);
      res.add(canon.toString(20));
    }
    System.out.println(res);
    return Z.valueOf(res.size());
  }
}

