package irvine.oeis.a087;
// Generated by gen_seq4.pl expr_gen/lambda at 2023-08-24 21:51

import irvine.math.factorial.MemoryFactorial;
import irvine.math.z.Integers;
import irvine.math.z.Z;
import irvine.oeis.LambdaSequence;

/**
 * A087923 Number of ways of arranging the numbers 1 ... 2n into a 2 X n array so there is exactly one local maximum.
 * a(n)=2*sum(k=1,n,(2*n-2)!*(2*k*(n-k+1)-1)*2^n*k!*(n-k)!/((2*k)!*(2*n-2*k)!))
 * @author Georg Fischer
 */
public class A087923 extends LambdaSequence {

  /** Construct the sequence. */
  public A087923() {
    super(1, n -> (Z.TWO).multiply(Integers.SINGLETON.sum(1, n, k -> MemoryFactorial.SINGLETON.factorial(2 * n - 2).multiply((Z.TWO).multiply(k).multiply(Z.valueOf(n - k + 1)).subtract(Z.ONE)).multiply(Z.ONE.shiftLeft(n)).multiply(MemoryFactorial.SINGLETON.factorial(k)).multiply(MemoryFactorial.SINGLETON.factorial(n - k)).divide(MemoryFactorial.SINGLETON.factorial(2 * k).multiply(MemoryFactorial.SINGLETON.factorial(2 * n - 2 * k))))));
  }
}
