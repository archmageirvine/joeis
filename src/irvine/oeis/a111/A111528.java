package irvine.oeis.a111;

import irvine.math.MemoryFunctionInt2;
import irvine.math.factorial.MemoryFactorial;
import irvine.math.z.Z;
import irvine.oeis.triangle.UpperLeftTriangle;

/**
 * A111528 Square table, read by antidiagonals, where the g.f. for row n+1 is generated by: x*R_{n+1}(x) = (1+n*x - 1/R_n(x))/(n+1) with R_0(x) = Sum_{n&gt;=0} n!*x^n.
 * @author Georg Fischer
 */
public class A111528 extends UpperLeftTriangle {

  /** Construct the sequence. */
  public A111528() {
    super(0, 0, 1);
    hasRAM(false);
  }

  /* T(n, 0) = 1, T(0, k) = k!, otherwise for n>=1 and k>=1:
     T(n, k) = (T(n-1, k+1) - T(n-1, k))/n - Sum_{j=1..k-1} T(n, j)*T(n-1, k-j).
  */
  private final MemoryFunctionInt2<Z> mB = new MemoryFunctionInt2<>() {
    @Override
    protected Z compute(final int n, final int k) {
      if (k <= 1) {
        return Z.ONE;
      }
      if (n == 0) {
        return MemoryFactorial.SINGLETON.factorial(k);
      }
      Z sum = get(n - 1, k + 1).subtract(get(n - 1, k)).divide(n);
      for (int j = 1; j < k; ++j) {
        sum = sum.subtract(get(n, j).multiply(get(n - 1, k - j)));
      }
      return sum;
    }
  };

  @Override
  public Z matrixElement(final int n, final int k) {
    return mB.get(n, k);
  }
}
