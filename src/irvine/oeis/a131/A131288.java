package irvine.oeis.a131;
// Generated by gen_seq4.pl expr_gen/lambda at 2023-09-13 11:40

import irvine.math.z.Binomial;
import irvine.math.z.Integers;
import irvine.math.z.Z;
import irvine.oeis.LambdaSequence;

/**
 * A131288 a(n) = number of ways to choose a collection C of subsets of U = [1,2,...,n] such that Union_{S in C} = U, Intersection_{S in C} = empty set.
 * a(n) = sum(k=0,n,(-1)^k*binom(n,k)*2^k*(2^(2^(n-k))-1))
 * @author Georg Fischer
 */
public class A131288 extends LambdaSequence {

  /** Construct the sequence. */
  public A131288() {
    super(0, n -> (n == 0) ? Z.TWO : Integers.SINGLETON.sum(0, n, k -> ((k & 1) == 0 ? Z.ONE : Z.NEG_ONE).multiply(Binomial.binomial(n, k)).multiply(Z.ONE.shiftLeft(k)).multiply(Z.TWO.pow(Z.ONE.shiftLeft(n - k)).subtract(Z.ONE))));
  }
}
