package irvine.oeis.a137;
// Generated by gen_seq4.pl expr_gen/lambda at 2023-08-24 21:51

import irvine.math.function.Functions;
import irvine.math.z.Integers;
import irvine.math.z.Z;
import irvine.oeis.LambdaSequence;

/**
 * A137801 Number of arrangements of 2n couples into n cars such that each car contains 2 men and 2 women but no couple (cars are labeled).
 * a(n) = n! * sum(i=0,n,(-1)^i * sum(j=0,n-i,(2*n)! * (2*n-i-2*j)! / (n-i-j)! / i! / j! / 2^(2*n-2*i-j) ) )
 * @author Georg Fischer
 */
public class A137801 extends LambdaSequence {

  /** Construct the sequence. */
  public A137801() {
    super(1, n -> {
      return Functions.FACTORIAL.z(n).multiply(Integers.SINGLETON.sum(0, n, i -> Z.NEG_ONE.pow(i).multiply(Integers.SINGLETON.sum(0, n - i, j -> {
        return Functions.FACTORIAL.z(2 * n).multiply(Functions.FACTORIAL.z(2 * n - i - 2 * j)).divide(Functions.FACTORIAL.z(n - i - j)).divide(Functions.FACTORIAL.z(i)).divide(Functions.FACTORIAL.z(j)).divide(Z.ONE.shiftLeft(2L * n - 2L * i - j));
      }))));
    });
  }
}
