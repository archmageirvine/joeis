package irvine.oeis.a174;
// Generated by gen_seq4.pl urlprep2/ratogf at 2023-12-20 14:56

import irvine.math.z.Z;
import irvine.oeis.recur.GeneratingFunctionSequence;

/**
 * A174154 Number of ways to place 6n nonattacking kings on a 12 x 2n chessboard.
 * @author Georg Fischer
 */
public class A174154 extends GeneratingFunctionSequence {

  /** Construct the sequence. */
  public A174154() {
    super(0, "[0, 448,-59281, 3689608,-141485072, 3632842475,-61151293377, 486018670449, 7110673719021,-355282797168619, 7805125834561750,-120787644461247815, 1433917521601031600,-13092670253017397215, 83877913428258704659,-184755253316270694616,-4266725433179907174031, 82335998894700394651901,-952009254666126966673796, 8661523087250332029653805,-66805240600688222182861662, 451339375837487448675798746,-2719571348796162565504741678, 14782596349429679171765334301,-73061510988747055309122504069, 330267098353842775956388942842,-1371752804262578223890375168964, 5254673072129348277153109543997,-18622737469829899757436340257385, 61228416399158699804621484828993,-187205875643334525147970829585222, 533432327695298858210381553149285,-1419311438083676683034744726952652, 3532451891465875904778828049906178,-8236705210457078339411642367777062, 18017697561193232235536013176700652,-37017322185220125774414395796648083, 71491160008257450681327802590567504,-129868144295605689997008303392471184, 221967416303673380170960689222016760,-356956219188072917117313500791428647, 539952432414375273203309417443882230,-767836201105618743331897589888819260, 1025670064685839353596509770775335305,-1285696520181304471064162857556756892, 1510621894675464930498400295672730343,-1661495320924220763537985553529107570, 1708305101435402614973823579541075741,-1639525223616587182652341410467569787, 1466533837456537613456821872852081734,-1220661704439047432548206117121008699, 943857986354193371364615928444017845,-676816476591070935766817355948817667, 449253470876074605154885582765085506,-275499172743267856241417580914101161, 155756628296635763280353356415757902,-80999469039951794157868014640691605, 38649671515505567165916997301106375,-16874983210908760792785651385114152, 6721172925589000338821415074614101,-2433648791133257840409309484158509, 797978924681191303527565813197295,-235893075161001219428756666935555, 62546683770100863224056803287942,-14786591491557537432688402148814, 3094959104534048177533681352799,-568749753878989316529701677248, 90833482252388172827285029638,-12449684907187405839719194626, 1441187713449842720703280065,-137991665381256761637404520, 10620992412418133969628300,-630574519733958189096000, 27058441331237911560000,-745460194573987200000, 9881265328704000000]",
      "[1,-200, 19591,-1252845, 58827505,-2162753808, 64829889078,-1629240689182, 35031124501133,-654454967945240, 10752566037209576,-156879699829988516, 2048776097631017397,-24108171056426689513, 257034531080309116618,-2494772567482865677279, 22133280277582878693605,-180118887001001382183984, 1348636789867805112026274,-9315545713899467284553179, 59499168382845285726017972,-352120178477097682063693543, 1934323013107671509059832463,-9878966314646961189006272617, 46972249732573258020377866081,-208183877121467820793024020729, 860974589150724576064816096663,-3325616222441474827288188284748, 12007102646405027060206035093213,-40549313398041902425202637254740, 128160961960827405525713512244418,-379279006512370536257299017344107, 1051368905565268405109177617606550,-2730662700682795572522784530198834, 6646355208785503282827723317955069,-15161829507999599355831555503563964, 32418089419841604310504626066285593,-64963905091650869917279263108816530, 121998193028385383238635351043687855,-214657313735486368434302654748877496, 353777524153903526644871915284150291,-545952447651523245976395515654219577, 788557229845726031285071277862716138,-1065477899782050092815249173889044974, 1345958367592910697332763314344919726,-1588548886423131006699445390007535964, 1750322460004952351721691789849070497,-1798910520031476972425563369104737493, 1722886523923952992401312780338774274,-1536009690078173688532095945663171041, 1273224933191855545781650218877302946,-979983174726292730062221357725344727, 699362171154778642087707164485332698,-462015283859449079185102433429700638, 282037700090254407809166846000612848,-158780300135911015654982957271875917, 82256781284683621993873503316293537,-39117488543991922262702977386610326, 17029736085111484438301715527001011,-6766292666982799092814924628874630, 2445102358065760086073498440897006,-800463457818116640733412431607635, 236339003295391504639451351871623,-62608507068414191797382321464409, 14791881602747947642116948625728,-3094801634963547035936901282789, 568588000125534978580839232812,-90798410660368398860732240817, 12444769805881872152497521690,-1440691704088085224964754909, 137955444475738809516914520,-10619160418237292545913100, 630516845227291857576000,-27057588402917527560000, 745460194573987200000,-9881265328704000000]");
  }

  private int mN = -1;

  @Override
  public Z next() {
    ++mN;
    final Z result = super.next();
    return mN == 0 ? Z.ONE : result;
  }
}
