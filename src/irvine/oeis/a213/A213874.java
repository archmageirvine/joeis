package irvine.oeis.a213;
// Generated by gen_seq4.pl 2025-02-03.ack/lambdan at 2025-02-03 18:14

import irvine.math.function.Functions;
import irvine.math.q.Q;
import irvine.math.z.Z;
import irvine.oeis.LambdaSequence;

/**
 * A213874 Number of words w where each letter of the 4-ary alphabet occurs n times and for every prefix z of w we have #(z,a_i) = 0 or #(z,a_i) &gt;= #(z,a_j) for all j&gt;i and #(z,a_i) counts the occurrences of the i-th letter in z.
 * @author Georg Fischer
 */
public class A213874 extends LambdaSequence {

  /** Construct the sequence. */
  public A213874() {
    super(0, n -> (n <= 1) ? Z.valueOf(23L * n + 1) : new Q(8).multiply(new Q(9297776).multiply(new Q(n).pow(10)).add(new Q(17051200).multiply(new Q(n).pow(9))).subtract(new Q(11545329).multiply(new Q(n).pow(8))).subtract(new Q(20688255).multiply(new Q(n).pow(7))).add(new Q(7760028).multiply(new Q(n).pow(6))).add(new Q(7548270).multiply(new Q(n).pow(5))).subtract(new Q(2879537).multiply(new Q(n).pow(4))).subtract(new Q(619195).multiply(new Q(n).pow(3))).add(new Q(326046).multiply(new Q(n).square())).subtract(new Q(30420).multiply(n)).add(216)).multiply(Functions.FACTORIAL.z(4 * n - 5)).divide(new Q(3).multiply(2L * n - 1).multiply(2L * n + 1).multiply(2L * n + 3).multiply(new Q(9).multiply(new Q(n).square()).subtract(new Q(9).multiply(n)).add(2)).multiply(new Q(9).multiply(new Q(n).square()).add(new Q(9).multiply(n)).add(2)).multiply(new Q(Functions.FACTORIAL.z(n - 2)).multiply(Functions.FACTORIAL.z(n + 1)).multiply(Functions.FACTORIAL.z(n + 2)).multiply(Functions.FACTORIAL.z(n + 3)))).num());
  }
}
