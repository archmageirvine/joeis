package irvine.oeis.a363;
// Generated by gen_seq4.pl 2025-02-06.ack/decexp at 2025-02-06 23:16

import irvine.math.cr.CR;
import irvine.oeis.cons.DecimalExpansionSequence;

/**
 * A363081 Decimal expansion of Product_{k&gt;=1} (1 - exp(-11*Pi*k)).
 * Formula:
 * @author Georg Fischer
 */
public class A363081 extends DecimalExpansionSequence {

  /** Construct the sequence */
  public A363081() {
    super(0, CR.valueOf(11).multiply(CR.PI).divide(CR.valueOf(24)).exp().multiply(CR.ONE.divide(CR.FOUR).gamma()).multiply(CR.ZERO.subtract(CR.THREE).add(CR.valueOf(11).sqrt()).pow(CR.ONE.divide(CR.FOUR)).multiply(CR.TWO.multiply(CR.valueOf(47).subtract(CR.valueOf(27).multiply(CR.THREE.sqrt())).pow(CR.ONE.divide(CR.SIX))).add(CR.valueOf(47).add(CR.valueOf(27).multiply(CR.THREE.sqrt())).pow(CR.ONE.divide(CR.SIX)).multiply(CR.SEVEN.add(CR.valueOf(33).sqrt()).sqrt())).multiply(CR.TWO.add(CR.valueOf(11).add(CR.THREE.multiply(CR.valueOf(11).sqrt())).multiply(CR.FOUR.subtract(CR.THREE.multiply(CR.THREE.sqrt())).add(CR.THREE.multiply(CR.valueOf(11).sqrt()))).pow(CR.ONE_THIRD)).add(CR.valueOf(143).add(CR.valueOf(33).multiply(CR.THREE.sqrt())).add(CR.valueOf(45).multiply(CR.valueOf(11).sqrt())).add(CR.NINE.multiply(CR.valueOf(33).sqrt())).pow(CR.ONE_THIRD))).divide(CR.TWO.multiply(CR.valueOf(47).subtract(CR.valueOf(27).multiply(CR.THREE.sqrt())).pow(CR.ONE.divide(CR.SIX))).multiply(CR.FOUR.add(CR.THREE.multiply(CR.THREE.sqrt())).add(CR.valueOf(11).sqrt())).add(CR.valueOf(47).add(CR.valueOf(27).multiply(CR.THREE.sqrt())).pow(CR.ONE.divide(CR.SIX)).multiply(CR.FOUR.subtract(CR.THREE.multiply(CR.THREE.sqrt())).add(CR.valueOf(11).sqrt())).multiply(CR.SEVEN.add(CR.valueOf(33).sqrt()).sqrt()))).sqrt()).divide(CR.SIX.pow(CR.SEVEN.divide(CR.EIGHT)).multiply(CR.ZERO.subtract(CR.valueOf(11).divide(CR.ZERO.subtract(CR.FOUR.multiply(CR.valueOf(22).pow(CR.ONE_THIRD))).add(CR.valueOf(1490).add(CR.valueOf(837).multiply(CR.THREE.sqrt())).subtract(CR.valueOf(351).multiply(CR.valueOf(11).sqrt())).subtract(CR.valueOf(306).multiply(CR.valueOf(33).sqrt())).pow(CR.ONE_THIRD)).add(CR.valueOf(1490).subtract(CR.valueOf(837).multiply(CR.THREE.sqrt())).subtract(CR.valueOf(351).multiply(CR.valueOf(11).sqrt())).add(CR.valueOf(306).multiply(CR.valueOf(33).sqrt())).pow(CR.ONE_THIRD)))).pow(CR.THREE.divide(CR.EIGHT))).multiply(CR.ONE.divide(CR.valueOf(34012224)).multiply(CR.TWO.add(CR.valueOf(11).add(CR.THREE.multiply(CR.valueOf(11).sqrt())).pow(CR.ONE_THIRD).multiply(CR.FOUR.subtract(CR.THREE.multiply(CR.THREE.sqrt())).add(CR.THREE.multiply(CR.valueOf(11).sqrt())).pow(CR.ONE_THIRD).add(CR.FOUR.add(CR.THREE.multiply(CR.THREE.sqrt())).add(CR.THREE.multiply(CR.valueOf(11).sqrt())).pow(CR.ONE_THIRD)))).pow(12)).subtract(CR.ZERO.subtract(CR.ONE).add(CR.TWO.add(CR.valueOf(11).add(CR.THREE.multiply(CR.valueOf(11).sqrt())).pow(CR.ONE_THIRD).multiply(CR.FOUR.subtract(CR.THREE.multiply(CR.THREE.sqrt())).add(CR.THREE.multiply(CR.valueOf(11).sqrt())).pow(CR.ONE_THIRD).add(CR.FOUR.add(CR.THREE.multiply(CR.THREE.sqrt())).add(CR.THREE.multiply(CR.valueOf(11).sqrt())).pow(CR.ONE_THIRD)))).pow(24).divide(CR.valueOf(1156831381426176L))).sqrt()).pow(CR.ONE.divide(CR.EIGHT)))).divide(CR.PI.pow(CR.THREE.divide(CR.FOUR)))));
  }
}
