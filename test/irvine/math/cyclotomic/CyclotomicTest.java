package irvine.math.cyclotomic;

import irvine.math.z.Z;
import junit.framework.TestCase;

/**
 * Tests the corresponding class.
 * @author Sean A. Irvine
 */
public class CyclotomicTest extends TestCase {

  public void testCyclotomicBad() {
    try {
      Cyclotomic.cyclotomic(-1, 0);
      fail();
    } catch (final ArithmeticException e) {
      assertEquals("n must be nonnegative", e.getMessage());
    }
  }

  public void testCyclotomicSmall() {
    assertEquals(-5, Cyclotomic.cyclotomic(0, -5).intValue());
    assertEquals(-6, Cyclotomic.cyclotomic(1, -5).intValue());
    assertEquals(-5, Cyclotomic.cyclotomic(1, -4).intValue());
    assertEquals(-4, Cyclotomic.cyclotomic(1, -3).intValue());
    assertEquals(-3, Cyclotomic.cyclotomic(1, -2).intValue());
    assertEquals(-2, Cyclotomic.cyclotomic(1, -1).intValue());
    assertEquals(-1, Cyclotomic.cyclotomic(1, 0).intValue());
    assertEquals(0, Cyclotomic.cyclotomic(1, 1).intValue());
    assertEquals(1, Cyclotomic.cyclotomic(1, 2).intValue());
    assertEquals(2, Cyclotomic.cyclotomic(1, 3).intValue());
    assertEquals(3, Cyclotomic.cyclotomic(1, 4).intValue());
    assertEquals(4, Cyclotomic.cyclotomic(1, 5).intValue());
    assertEquals(-4, Cyclotomic.cyclotomic(2, -5).intValue());
    assertEquals(-3, Cyclotomic.cyclotomic(2, -4).intValue());
    assertEquals(-2, Cyclotomic.cyclotomic(2, -3).intValue());
    assertEquals(-1, Cyclotomic.cyclotomic(2, -2).intValue());
    assertEquals(0, Cyclotomic.cyclotomic(2, -1).intValue());
    assertEquals(1, Cyclotomic.cyclotomic(2, 0).intValue());
    assertEquals(2, Cyclotomic.cyclotomic(2, 1).intValue());
    assertEquals(3, Cyclotomic.cyclotomic(2, 2).intValue());
    assertEquals(4, Cyclotomic.cyclotomic(2, 3).intValue());
    assertEquals(5, Cyclotomic.cyclotomic(2, 4).intValue());
    assertEquals(6, Cyclotomic.cyclotomic(2, 5).intValue());
    assertEquals(21, Cyclotomic.cyclotomic(3, -5).intValue());
    assertEquals(13, Cyclotomic.cyclotomic(3, -4).intValue());
    assertEquals(7, Cyclotomic.cyclotomic(3, -3).intValue());
    assertEquals(3, Cyclotomic.cyclotomic(3, -2).intValue());
    assertEquals(1, Cyclotomic.cyclotomic(3, -1).intValue());
    assertEquals(1, Cyclotomic.cyclotomic(3, 0).intValue());
    assertEquals(3, Cyclotomic.cyclotomic(3, 1).intValue());
    assertEquals(7, Cyclotomic.cyclotomic(3, 2).intValue());
    assertEquals(13, Cyclotomic.cyclotomic(3, 3).intValue());
    assertEquals(21, Cyclotomic.cyclotomic(3, 4).intValue());
    assertEquals(31, Cyclotomic.cyclotomic(3, 5).intValue());
    assertEquals(26, Cyclotomic.cyclotomic(4, -5).intValue());
    assertEquals(17, Cyclotomic.cyclotomic(4, -4).intValue());
    assertEquals(10, Cyclotomic.cyclotomic(4, -3).intValue());
    assertEquals(5, Cyclotomic.cyclotomic(4, -2).intValue());
    assertEquals(2, Cyclotomic.cyclotomic(4, -1).intValue());
    assertEquals(1, Cyclotomic.cyclotomic(4, 0).intValue());
    assertEquals(2, Cyclotomic.cyclotomic(4, 1).intValue());
    assertEquals(5, Cyclotomic.cyclotomic(4, 2).intValue());
    assertEquals(10, Cyclotomic.cyclotomic(4, 3).intValue());
    assertEquals(17, Cyclotomic.cyclotomic(4, 4).intValue());
    assertEquals(26, Cyclotomic.cyclotomic(4, 5).intValue());
    assertEquals(521, Cyclotomic.cyclotomic(5, -5).intValue());
    assertEquals(205, Cyclotomic.cyclotomic(5, -4).intValue());
    assertEquals(61, Cyclotomic.cyclotomic(5, -3).intValue());
    assertEquals(11, Cyclotomic.cyclotomic(5, -2).intValue());
    assertEquals(1, Cyclotomic.cyclotomic(5, -1).intValue());
    assertEquals(1, Cyclotomic.cyclotomic(5, 0).intValue());
    assertEquals(5, Cyclotomic.cyclotomic(5, 1).intValue());
    assertEquals(31, Cyclotomic.cyclotomic(5, 2).intValue());
    assertEquals(121, Cyclotomic.cyclotomic(5, 3).intValue());
    assertEquals(341, Cyclotomic.cyclotomic(5, 4).intValue());
    assertEquals(781, Cyclotomic.cyclotomic(5, 5).intValue());
    assertEquals(31, Cyclotomic.cyclotomic(6, -5).intValue());
    assertEquals(21, Cyclotomic.cyclotomic(6, -4).intValue());
    assertEquals(13, Cyclotomic.cyclotomic(6, -3).intValue());
    assertEquals(7, Cyclotomic.cyclotomic(6, -2).intValue());
    assertEquals(3, Cyclotomic.cyclotomic(6, -1).intValue());
    assertEquals(1, Cyclotomic.cyclotomic(6, 0).intValue());
    assertEquals(1, Cyclotomic.cyclotomic(6, 1).intValue());
    assertEquals(3, Cyclotomic.cyclotomic(6, 2).intValue());
    assertEquals(7, Cyclotomic.cyclotomic(6, 3).intValue());
    assertEquals(13, Cyclotomic.cyclotomic(6, 4).intValue());
    assertEquals(21, Cyclotomic.cyclotomic(6, 5).intValue());
    assertEquals(13021, Cyclotomic.cyclotomic(7, -5).intValue());
    assertEquals(3277, Cyclotomic.cyclotomic(7, -4).intValue());
    assertEquals(547, Cyclotomic.cyclotomic(7, -3).intValue());
    assertEquals(43, Cyclotomic.cyclotomic(7, -2).intValue());
    assertEquals(1, Cyclotomic.cyclotomic(7, -1).intValue());
    assertEquals(1, Cyclotomic.cyclotomic(7, 0).intValue());
    assertEquals(7, Cyclotomic.cyclotomic(7, 1).intValue());
    assertEquals(127, Cyclotomic.cyclotomic(7, 2).intValue());
    assertEquals(1093, Cyclotomic.cyclotomic(7, 3).intValue());
    assertEquals(5461, Cyclotomic.cyclotomic(7, 4).intValue());
    assertEquals(19531, Cyclotomic.cyclotomic(7, 5).intValue());
    assertEquals(626, Cyclotomic.cyclotomic(8, -5).intValue());
    assertEquals(257, Cyclotomic.cyclotomic(8, -4).intValue());
    assertEquals(82, Cyclotomic.cyclotomic(8, -3).intValue());
    assertEquals(17, Cyclotomic.cyclotomic(8, -2).intValue());
    assertEquals(2, Cyclotomic.cyclotomic(8, -1).intValue());
    assertEquals(1, Cyclotomic.cyclotomic(8, 0).intValue());
    assertEquals(2, Cyclotomic.cyclotomic(8, 1).intValue());
    assertEquals(17, Cyclotomic.cyclotomic(8, 2).intValue());
    assertEquals(82, Cyclotomic.cyclotomic(8, 3).intValue());
    assertEquals(257, Cyclotomic.cyclotomic(8, 4).intValue());
    assertEquals(626, Cyclotomic.cyclotomic(8, 5).intValue());
    assertEquals(15501, Cyclotomic.cyclotomic(9, -5).intValue());
    assertEquals(4033, Cyclotomic.cyclotomic(9, -4).intValue());
    assertEquals(703, Cyclotomic.cyclotomic(9, -3).intValue());
    assertEquals(57, Cyclotomic.cyclotomic(9, -2).intValue());
    assertEquals(1, Cyclotomic.cyclotomic(9, -1).intValue());
    assertEquals(1, Cyclotomic.cyclotomic(9, 0).intValue());
    assertEquals(3, Cyclotomic.cyclotomic(9, 1).intValue());
    assertEquals(73, Cyclotomic.cyclotomic(9, 2).intValue());
    assertEquals(757, Cyclotomic.cyclotomic(9, 3).intValue());
    assertEquals(4161, Cyclotomic.cyclotomic(9, 4).intValue());
    assertEquals(15751, Cyclotomic.cyclotomic(9, 5).intValue());
    assertEquals(781, Cyclotomic.cyclotomic(10, -5).intValue());
    assertEquals(341, Cyclotomic.cyclotomic(10, -4).intValue());
    assertEquals(121, Cyclotomic.cyclotomic(10, -3).intValue());
    assertEquals(31, Cyclotomic.cyclotomic(10, -2).intValue());
    assertEquals(5, Cyclotomic.cyclotomic(10, -1).intValue());
    assertEquals(1, Cyclotomic.cyclotomic(10, 0).intValue());
    assertEquals(1, Cyclotomic.cyclotomic(10, 1).intValue());
    assertEquals(11, Cyclotomic.cyclotomic(10, 2).intValue());
    assertEquals(61, Cyclotomic.cyclotomic(10, 3).intValue());
    assertEquals(205, Cyclotomic.cyclotomic(10, 4).intValue());
    assertEquals(521, Cyclotomic.cyclotomic(10, 5).intValue());
  }

  public void testCyclotomicBig() {
    assertEquals(7, Cyclotomic.cyclotomic(49, 1).intValue());
    assertEquals(7, Cyclotomic.cyclotomic(117649, 1).intValue());
    assertEquals(1, Cyclotomic.cyclotomic(48, 1).intValue());
    assertEquals(new Z("101091938434921"), Cyclotomic.cyclotomic(14, 216));
    assertEquals(new Z("7273874443700505839258133139214297828285509273120041403506024962433901672843701315721562686184117084676324265386549374705834663105677288133199672928511577008135073583002174194064484002154313550255809087421099088381632532994978327891529215080603010240266631820113967712694375389640457163080597426274905039837847223301193968861294976238662359872412439078472453928926174599404770244038455655142536909155596053157572248440115752758603000309374467128059069451947143012088137031677304315967609671725579650072041291123973740867461432652940985785128920723130508974463584036690021666892924898581014827321766220063435930445670541987041118590928623768280195911933050426891733847543011608707210468006544554493103334206793687408421466157537691624085670097060176579566162206889287904447355077485643151744123069109488604366714635706443727547342959905717171989374140302304203691700716606904425541887321872850303338759260307870837428220573303118183994026811536576698907029526594325973115288793244386922779904376430650181027899290848934329712738215047282710799148427791393846732525521874044617392564213952148137968658769232166603346306517404200519742530524930089424046167551031687252612586898656570801150259644162511247139929887040359531748885938758829017233900690777389887254658074508130167280661478121426779047891810266850738898753941817031291980832472067763667003456381977573270384118352657521025847533676464868029879049225134859694670992717850557805223007648153924926901516166284534942768896776812331489845044472710862584105808143709228381953793438598496360292796269312940657741188758926078292946729558221704108693223903649272294650367713402648211910180599479801439434947270972415032057556644220426659487676541284370951816947230048867334313607117669400726414320949186274264122622380131940173454162477065364100018268025805452958132670393080976911281576710144955341208897653738890297893699132019382504287274447473613220884776382654435703200316173716018672455880929695105574972305705025447178926360041746043649302275852649027076808526436606786055680526721296175535374489135113561467630626765923829154289641312025997259967972485850827208990677579701918761325384699111989480983119992763952924379638446492372729668847474806928629490005517029450926375423182254894818632627924938839988595911199433644248412803571755663280197579853421960457592158289921"), Cyclotomic.cyclotomic(841, 738));
    assertEquals(new Z("8204315327765670540169184787901626007701442210816570220555471398540882308494657817770137781061705665151917371995443454145997293346191269811690893886511486820181867243544578777745584344614597423614002958726911407803710925294343044310959893769937477241893688166135442106138981926223767320906126024182590892704051175755719779780343671180297029411954911407883740783291269024968393920699053797220629926452438451310103703335710802070188590443359590922756103087044793830026691997441466210301407209686628778170448706163731181366821390819028165969106671341559686650304180473791645492796217918404338532907001406262986901595492592170407228176436572592104036662743907932494544532383890078190845175388963284827471820921580804924121731018267074435823455167311532974572391435521702511828405313448821011609425746370000576659073005748656253377046501871661548800398491873088811513820611226003590135573142825485695208223864687030732715425808747453618512244663040473263243623535757836372156172583099383847229992756763745169652516859618361389882211195147024117873188549806725729016718119130434703302205674745914811622371593820086205474746889718395442702347771221544448692904415476716227067680597581418245632440207375503940624923160563568968953732272703727532466073232102214207254202215828613087908113682648066398094409209312655323057897695156066302205912367753311953711263612191486603137861771786814908545435743466419672657218602799409397017763364908074244674684894983370162025336856989976998159123980343062346040301728836821646009946926438078628739538025532386602657049608346043340838817180034436679861045155960183760707979024699684264263047077802515128645061941304912108914987125690984788259107861709629374836016120579796448805327885349450652382888120241838358805928276937439790330255318550104710187692759392083701922568540616830741267305202315717518788900442170858326212242645762645870432695583636629552646294812500001"), Cyclotomic.cyclotomic(999, 855));
    assertEquals(new Z("74234938860463437358004588449527811008635526700946781330801462590963968843690457746994885090674741748336020066169171648790187247792584897148490568257087140596066055611359823457084513596316071747075178345798596904667780091558932444304566606361541953140466554575099557196922835379425092377991039068346770839002401086890289440779421823718136405328589971789626527094942272144035610725380982919797391322560178895919249310841245928705380643681463962386486172028256418110702939089592673135167363550077106428496571323793737730441950851317826701917056331516717844915601198340072453522726023937869304152124092163242871444138086020864175895057805940612659719581822558366109501918804117864344042428183176347769542013338787057583562294090779705462738728794439638443749658343681339456485820791843672239871910015142153756467555559464536462802797299692945361345013252454062012411944402207082384012123334681498539959655271886801"), Cyclotomic.cyclotomic(427, 339));
    assertEquals(new Z("113407614375862598473360062196552684712296846634696341947759418670174823986502675800449816876394377786831024658101840992278881"), Cyclotomic.cyclotomic(168, 403));
    assertEquals(new Z("943885281105674650083495363535426476303691166279763584255981191633103355054445772946308578675019183692654072383801495447741075321959648776927416834629848298311"), Cyclotomic.cyclotomic(87, 690));
    assertEquals(new Z("30112857195633711058798477707345946406371238312006799869750837264401916189847153475085309196695400583433261271783769259176593149511400593155135942293633218462767106001740437541408234162749940073750004282417794281138708675284089805906238000255590582630988799947046744761706130795706407438163498226732303530150818261075564764688764128849309990912001"), Cyclotomic.cyclotomic(500, 54));
    assertEquals(new Z("923676984528705354978997745282141795015118471962438616047473311354606178399755319380039354617563623341508980059921345459308606414242042557453195101407073089478052957043053004244968879855373753016465660151450600929884494607513053036043112587424192718018769776565877137790780581720895316829837885010383284749061770372578043517758379864596216292750697495245536723544939500728569088588190106203567460932358592413242014327201933338402931172792906728153453519294675039324432506556475051508783877729138655776191065279681"), Cyclotomic.cyclotomic(339, 195));
    assertEquals(new Z("2184745005283921262423065650299023514256197481705218772480562640706551539163191375651654113498568087766613733125186656754726648258877007591875206073622846521398290325467791842358474828762538534230888738232705856540766839167897936167023990343368382029251248465784908928099999999920233556923127490136639000000000000000018530201888518409999999999999999999999995695327900000000000000000000000000000001"), Cyclotomic.cyclotomic(352, 300));
    assertEquals(new Z("5496263618224440836856083193493361818226821124315769550662381975583293446436276162867289638623984190718563505"), Cyclotomic.cyclotomic(100, 523));
    assertEquals(new Z("4125696074226563874296140474497077291292774317058992174486565372152925321585015045276318958970070258701376787576638940432704821115401063795385593684322122121288188582949344154409666827187533195450118548738596428896213284389332986191149589127588969712488814319501484497034545500382597308256227951170834957525941272108458078768849260925027709706455655628928181420121172588941259889219400772382992843159741792931060981690142817512243267386518582905551252729808344519822515480567704152686634991617"), Cyclotomic.cyclotomic(512, 84));
    assertEquals(new Z("37193941170255796298373294213361848429873003940150877629308943398781389264192076478598507798475362348666505069732514125737137987166406396858364736522616230540052377309528280454853259884928517827635973133358340357258439302523585382760265805307612330235306798795083771227816182966374724490241"), Cyclotomic.cyclotomic(145, 385));
    assertEquals(new Z("1702230829912440352879352553619378208549050916277205986577276387475434152135433554930710064620155816556199211554789742639357301062028266403143402983821632696547576666878109494448396997360181329428375950788176234710917948912827931579645515092702390428884642075096382391158267203427199991873249602525147688610820013698433989034193224722180572237290521302442736986021587906064413173443067962069711352514296982475805792937903172853962506085793645615416370481215150157680500889665042946157882568630751260582672111076511295114877013321473854073035747970151966352283894467773467919025518971034157936823337474789045096956633756597522816918216881139137739970698650978114267267599864156053270580788076247045385416410631159805591284794029570486008508846148079258359355537246130062070021178596128784031577605450139331092008959759862995138474474826152549648730080676462282398136543758269426580537896110475746008703383203082359207413992371071166528177952261450924830837466612623387372779900610020405769858378069411754101851733136846362181805203373020873510093879981337761180319578543994568042398488534071223605348675650157045128613198796302314843237336338918958069350026180222143139793780714166725655795514965617364543812466799419336353586981151308684914789995654842518063847298209137995188756732111962418900787305429742921427091293063628329484478465986906008986972019071872557231873764420217623507950392334844179007113105530724749670037019010486030437169650259661103155280950996791377606007676341356778450741860071953457219941624097065650990985754834675013683686154317807165171387946255923001291"), Cyclotomic.cyclotomic(785, 342));
    assertEquals(new Z("140039904713190322330506430719807647983615575517308433640653102444101428998726385736045361496484714465809822990854225904367730455935883308050832150171923600206774755386168129183778370020305141020953413310504911031659967787932324925764461755649799996006715350184265489523235049096613375075208674160587673536658602918475282022926994123749232592392067003167669906757910674809135330008472662894717169551548915616833627060659001288026339055295408961858819547728439926957"), Cyclotomic.cyclotomic(326, 733));
    assertEquals(new Z("74251111354563721591510350860813103479651630587181921199443975989412790394040015009255447329773676433134851733351826940663339201296679589356344683048929030750348486161690016328746923928242923726605037085623475950920494839502013171011235241116387922968827741175304848265661707093388348781149709308037189330315553677580824928158626129815778884006348208730393735100308769014208335099345200392563670941942958029382305132408609208430477844322941584327599386544147940341231682472686801282102057842100839999143102384477202138079692165575016354594976696615563544140466820251544442673222103145796413158630174862417093182947800702188716026164966481299144273809094503910040626893322271712604862331361808814304744949333214320734099528732140025010918449453193502222287457910549991809968286473001096449353416761249457928699681489098926355064812899207202225799123652325720633840839159650455132358939872101770555847493570871609667596986134341491495550859731108963145015938128014583860506976339323594165191813456448306289313663419312577630732624094968001"), Cyclotomic.cyclotomic(1000, 391));
    assertEquals(new Z("337065823205210759510281222870842850268563527081333075343459094993536965440607365560543421984498192288892447888003209687974964066242279223241270766342411530912231593916870356394884397476088299077648131766418504539647551321130689645673571589455221118459392445275883433105192761874284134882124281262069439750024334585003346982585614479175383649744004729775464436710114542417876170453467527914577098069480005592822966280583477436454348707746645160710359167892190499306869039834104429017890589364821378109045467155623102896835980785204455403966992180214292687104319067619750194559108416610738844798184805934418431886357036984941473182253010316739066505126746315530559792874059590837392296693958732004193724304493278057308664992668263562940329648450432981504604145658247473682357616953587366070867248549318452809761518237753787527915949894458436245872165621861714721604227737632532750472359783451518151914985179821718087288922056768556783781963499052766357766145626643980053407398754553822112453594024251705187757249467426767850265275339132989034364486646651486673355504751503091450929230040022899454186174695535293900338455296272346147324826590032027210264648382030517195820567903024330635031537075216765003601"), Cyclotomic.cyclotomic(824, 901));
    assertEquals(new Z("49343772527098291236700627991830382664044934177284757731016414643997255548090171148703227931116708481673264225630029642233177189409368635437881873727087576374745417515274949083503054989816700611"), Cyclotomic.cyclotomic(146, 490));
    assertEquals(new Z("7624942788395630039946760949932970155767974319370467080961749971502002336283778840931150791383419494304442394922065521258706927203142485052667830463965783989693677250636494301344782708529971996047285890111017186201582039534618428574720256234667906871656900931091216039908288409874874091"), Cyclotomic.cyclotomic(206, 635));
    assertEquals(new Z("147216464377108411454219847455187810635430311068963442623768647741705370932707645724462280214554807157660381779583234591181451246428034991265628863300334828547193438070788343682420729669316710936060930481748169272749985985952779453271046345480736810115707310247824499225756517653348239339559616440424188055353184133712432134896939978315316773830193181013474934874973554160055976506000300120102697017605518518203477631798734672730536932631901223813938251669112165407307834064529350617761"), Cyclotomic.cyclotomic(460, 571));
    assertEquals(new Z("77473983384020124598024808360973108256325035715492985080091403164078204698112711191172933601295366740179870833413517904671024016437318880356491314256468266193203533265917307533242643289359688265687645531248030134986569893606306903586900304588877413784081685613900647261039309864085215348007084383042006922524845478202368903822328692971764245322008400868645251532875591638879923858295118371512470620738197358528383872911935176655205764428476178398494521528796856579724455787417917253167563250016050106336100488327946830857357160661198358327295714177227470566036667082353911328095816907778998993368466706003180204913360327509059586807709280565034307269048088180815095674788751427223232815017910824403172531650535769757216503778469943531157752597082925480899953989518722349256024538252199157808281730671983336530040504664071048104043437042684077477394001590109853197957255818739296484306112948539763945084173592067284173516777276430206819348784531046662099313295233020336192330689862509821242024079257438876771142001"), Cyclotomic.cyclotomic(693, 651));
    assertEquals(new Z("284479125428465557422913809226680256342651200365918229861030034064500969932507746819672096985430782650687444111613333977031193782616882666160259146471872907019998726111822184590062509510448055579424397182946223600565919403619758350507542641917"), Cyclotomic.cyclotomic(254, 84));
    assertEquals(new Z("77649644991363823417773797564730398933931003395414707726155431134793986928143917731934287542365270275576550331395940327430296955601187707868068490378360064640286093207752485160470141582866251383365282206079651"), Cyclotomic.cyclotomic(159, 102));
    assertEquals(new Z("156588366625537778894573385097688923972579632226774479142599507400321501712525235671566618460473747265755790519539118303948277641366394940261485998609152652833612472480275137439717284655381181466931299718658799741292666375758187697634653966182183130216492097671287773912956750211215839952810996919445953258516972348641184850496658613283908386926793946307557192102474621175605099420935107672793900223891451836657937438116684590479537840657773921720889377893151723473251276728523433914122374777227178634342375251247296140679838417751993751893004338898877998877196336428684801"), Cyclotomic.cyclotomic(555, 97));
    assertEquals(new Z("6503473925037927986465520303433334882001600847403069060332316861410076258610117576630914055429622643547085552795489513183740313899379387417156289740326218329812436429264027983833033893528737448775713465598788207140859084080304368891882564762878035212577370238372376418082943815606752227022424107980002447012810072642403290450621945365449327852771645373629434935176561987420013153051328214075490868634188516624381272393106015882575102228299249629800881894196713655155377820190965377592998846562383437259495422334085310561264598308354311496485776874243564848614331065750760375559228617118761362321334279556591609502143749109213476015856172490064302916633570897476831137069552375473629642766447026663475203191166488022369529308534918611371522468188509354911991327322033471372934159810312443749891294390950360136497676126929796804562797273433673301809081"), Cyclotomic.cyclotomic(331, 376));
    assertEquals(new Z("194979784813192280729552623827564800817460501634406877459816700065590781838101013022672985365700339670100661919257474017579587309057393713434254006509418265090849398371677915619040253229894356273428972305211574404683100048460570858581294993695723326763606685993424670713394222014866314554831764316312771631733913362947672018446468972761444964150720116801160363535268389890477950960899578719663461"), Cyclotomic.cyclotomic(546, 556));
  }

  public void testPolys() {
    assertEquals("1-x^2+x^4", Cyclotomic.cyclotomic(12).toString());
  }
}
